from telebot import TeleBot, types
from constants import api_token_bot, support_photo_url
from db_operations import (
    db_add_user,
    db_date_last_visit,
    db_all_id,
    db_update_loc,
    db_0_loc,
    db_0_city,
    db_read)
from action import (
    log,
    log_city_loc,
    start_menu,
    main_menu,
    action_menu_loc,
    action_menu_city,
    support_menu,
    error_city,
    check_on_0,
    main_menu_city_no_loc,
    main_menu_loc_no_city)
from weather_in_loc import (
    answer_now_w_loc,
    answer_today_f_loc,
    answer_tomorrow_f_loc,
    answer_in_2_days_f_loc,
    answer_in_3_days_f_loc,
    answer_in_4_days_f_loc,
    answer_in_5_days_f_loc)
from weather_in_city import (
    answer_now_w_city,
    answer_today_f_city,
    answer_tomorrow_f_city,
    answer_in_2_days_f_city,
    answer_in_3_days_f_city,
    answer_in_4_days_f_city,
    answer_in_5_days_f_city)
from lists import random_emoji, list_hi, list_yes
from geocoding import save_name_city_country_and_loc, save_name_loc_and_full

bot = TeleBot(api_token_bot)

print(bot.get_me())


@bot.message_handler(commands=['start'])
def handler_start(message: types.Message):
    try:
        if message.from_user.id in db_all_id():
            check_on_0(message)
        else:
            db_add_user(message)
            answer = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üñêüèª"
            bot.send_message(message.from_user.id, answer)
            start_menu(message)
            log(message, answer)
    except Exception as e:
        print("Exception (find):", e)
        pass


@bot.message_handler(commands=['help'])
def handler_help(message: types.Message):
    try:
        answer = "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –º–æ–∂–Ω–æ —Ç–∞–∫:\nüëâüèª üìé \nüëâüèª –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è\nüëâüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é\n\n" \
                 "- –í–≤–µ–¥—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üèôÔ∏è, –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –Ω–µ –≤–∞—à –≥–æ—Ä–æ–¥, " \
                 "—Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –≥–æ—Ä–æ–¥–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. " \
                 "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n–ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ üåç\n\n" \
                 "- –û–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫–∏, –∏–ª–∏ —Å–ª–æ–≤–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\n@tyurikov87\n\n" \
                 "- –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ—Å—É—Ä—Å—ã:\nopenweathermap.org\nopenstreetmap.org\n–Ø–Ω–¥–µ–∫—Å API –ì–µ–æ–∫–æ–¥–µ—Ä"
        bot.send_message(message.from_user.id, answer)
        log(message, answer)
    except Exception as e:
        print("Exception (find):", e)
        pass


@bot.message_handler(commands=['stop'])
def handler_stop(message: types.Message):
    try:
        answer = "–î–æ –≤—Å—Ç—Ä–µ—á–∏! \n–•–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ /start"
        hide_markup = types.ReplyKeyboardRemove(True)
        bot.send_message(message.from_user.id, answer, reply_markup=hide_markup)
        log(message, answer)
    except Exception as e:
        print("Exception (find):", e)
        pass


@bot.message_handler(commands=['url'])
def url(message: types.Message):
    try:
        markup = types.InlineKeyboardMarkup()
        btn_my_site = types.InlineKeyboardButton(text='–ñ–º–∏ –¥–∞–≤–∞–π', callback_data='sss')
        markup.add(btn_my_site)
        answer = "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        bot.send_message(message.from_user.id, answer, reply_markup=markup)
        log(message, answer)
    except Exception as e:
        print("Exception (find):", e)
        pass


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    try:
        if call.data == 'sss':
            answer = "—Ö–∞-—Ö–∞-—Ö–∞ —è –ø–æ—à—É—Ç–∏–ª üôÉ"
            bot.send_message(call.from_user.id, answer)
            log(call.message, answer)
    except Exception as e:
        print("Exception (find):", e)
        pass


@bot.message_handler(content_types=['location'])
def handler_location(message: types.Message):
    try:
        db_update_loc(message)
        save_name_loc_and_full(message)
        action_menu_loc(message)
    except Exception as e:
        print("Exception (find):", e)
        pass


@bot.message_handler(
    func=lambda message: message.text == '–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ üèôÔ∏è' or message.text == '–ü–æ–≥–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ üå¶üèôÔ∏è')
def handler_message(message: types.Message):
    try:
        answer = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üèôÔ∏è\n–î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è " \
                 "\n–ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ üåç"
        hide_markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(message.from_user.id, answer, reply_markup=hide_markup)
        log(message, answer)
        bot.register_next_step_handler(msg, city_in_db)
    except Exception as e:
        print("Exception (find):", e)
        pass


def city_in_db(message):
    try:
        save_name_city_country_and_loc(message)
        action_menu_city(message)
    except Exception as e:
        print("Exception (find):", e)
        error_city(message)


@bot.message_handler(content_types=['text'])
@bot.edited_message_handler(content_types=['text'])
def handler_message(message: types.Message):
    try:
        db_date_last_visit(message)
        if message.text == '–ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ üå¶üåç':
            support_menu(message)
        elif message.text == f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå¶ {db_read(message.from_user.id)[0]} üåç':
            action_menu_loc(message)
        elif message.text == f'–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã üå¶ {db_read(message.from_user.id)[4]} üèôÔ∏è':
            action_menu_city(message)
        elif message.text == '–°–º–µ–Ω–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üåç':
            answer = "–û—Ç–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üåç\nüëâüèª üìé"
            bot.send_message(message.from_user.id, answer)
            log_city_loc(message, answer)
        elif message.text == '–î–µ—Ç–∞–ª–∏ –í–∞—à–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ üåç':
            answer = f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ üåç:\n{db_read(message.from_user.id)[1]}"
            bot.send_message(message.from_user.id, answer)
            log_city_loc(message, answer)
        elif message.text == "–ù—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞":
            answer = "–í–æ—Ç –í–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É\nüëâüèª üìé \nüëâüèª –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è\nüëâüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"
            bot.send_chat_action(message.from_user.id, 'upload_photo')
            bot.send_photo(message.from_user.id, support_photo_url, answer)
            log(message, answer)
        elif message.text == '–ù–∞–∑–∞–¥ üëàüèª':
            if db_0_loc(message) == 0 and db_0_city(message) == '0':
                start_menu(message)
            elif db_0_loc(message) == 0:
                main_menu_city_no_loc(message)
            # else:
            #     start_menu(message)
        elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üëàüèª':
            if db_0_city(message) == '0':
                main_menu_loc_no_city(message)
            else:
                main_menu(message)
        # –ü–æ–º–µ–Ω—è–ª –ø–µ—Ä–≤–æ–µ '–µ' –∏ '–æ' —Ä—É—Å–∫–æ–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –¥–ª—è city (–≥–¥–µ  # –∑–∞–º–µ–Ω–∞)
        elif message.text == '–íe—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üëàüèª':  # –∑–∞–º–µ–Ω–∞
            if db_0_loc(message) == 0:
                main_menu_city_no_loc(message)
            else:
                main_menu(message)
        elif message.text == '–îe—Ç–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å üå¶':  # –∑–∞–º–µ–Ω–∞
            try:
                bot.send_message(message.from_user.id, answer_now_w_city(message.from_user.id))
                bot.send_chat_action(message.from_user.id, action='typing')
                log_city_loc(message, answer_now_w_city(message.from_user.id))
            except Exception as e:
                print("Exception (find):", e)
                error_city(message)
                main_menu(message)
        elif message.text == '–ü—Äo–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':  # –∑–∞–º–µ–Ω–∞
            try:
                bot.send_message(message.from_user.id, answer_today_f_city(message.from_user.id))
                bot.send_chat_action(message.from_user.id, action='typing')
                log_city_loc(message, answer_today_f_city(message.from_user.id))
            except Exception as e:
                print("Exception (find):", e)
                error_city(message)
                main_menu(message)
        elif message.text == '–ü—Äo–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':  # –∑–∞–º–µ–Ω–∞
            try:
                bot.send_message(message.from_user.id, f'{db_read(message.from_user.id)[4]} üèôÔ∏è\n'
                                                       f'{answer_tomorrow_f_city(message.from_user.id)}')
                bot.send_chat_action(message.from_user.id, action='typing')
                log_city_loc(message, f'{db_read(message.from_user.id)[4]} üèôÔ∏è\n'
                                      f'{answer_tomorrow_f_city(message.from_user.id)}')
            except Exception as e:
                print("Exception (find):", e)
                error_city(message)
                main_menu(message)
        elif message.text == '–ü—Äo–≥–Ω–æ–∑ –Ω–∞ 3Ô∏è‚É£ –¥–Ω—è':  # –∑–∞–º–µ–Ω–∞
            try:
                answer = '{0}\n{1}\n{2}\n{3}'.format(
                    answer_today_f_city(message.from_user.id),
                    answer_tomorrow_f_city(message.from_user.id),
                    answer_in_2_days_f_city(message.from_user.id),
                    answer_in_3_days_f_city(message.from_user.id))
                bot.send_chat_action(message.from_user.id, action='typing')
                bot.send_message(message.from_user.id, answer)
                log_city_loc(message, answer)
            except Exception as e:
                print("Exception (find):", e)
                error_city(message)
                main_menu(message)
        elif message.text == '–ü—Äo–≥–Ω–æ–∑ –Ω–∞ 5Ô∏è‚É£ –¥–Ω–µ–π':  # –∑–∞–º–µ–Ω–∞
            try:
                answer = '{0}\n{1}\n{2}\n{3}\n{4}\n{5}'.format(
                    answer_today_f_city(message.from_user.id),
                    answer_tomorrow_f_city(message.from_user.id),
                    answer_in_2_days_f_city(message.from_user.id),
                    answer_in_3_days_f_city(message.from_user.id),
                    answer_in_4_days_f_city(message.from_user.id),
                    answer_in_5_days_f_city(message.from_user.id))
                bot.send_message(message.from_user.id, answer)
                bot.send_chat_action(message.from_user.id, action='typing')
                log_city_loc(message, answer)
            except Exception as e:
                print("Exception (find):", e)
                error_city(message)
                main_menu(message)
        elif message.text == '–î–µ—Ç–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å üå¶':
            bot.send_message(message.from_user.id, answer_now_w_loc(message.from_user.id))
            bot.send_chat_action(message.from_user.id, action='typing')
            log_city_loc(message, answer_now_w_loc(message.from_user.id))
        elif message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
            bot.send_message(message.from_user.id, answer_today_f_loc(message.from_user.id))
            bot.send_chat_action(message.from_user.id, action='typing')
            log_city_loc(message, answer_today_f_loc(message.from_user.id))
        elif message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
            bot.send_message(message.from_user.id, f'–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è üåç\n{answer_tomorrow_f_loc(message.from_user.id)}')
            bot.send_chat_action(message.from_user.id, action='typing')
            log_city_loc(message, f'–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è\n{answer_tomorrow_f_loc(message.from_user.id)}')
        elif message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3Ô∏è‚É£ –¥–Ω—è':
            answer = '{0}\n{1}\n{2}\n{3}'.format(
                answer_today_f_loc(message.from_user.id),
                answer_tomorrow_f_loc(message.from_user.id),
                answer_in_2_days_f_loc(message.from_user.id),
                answer_in_3_days_f_loc(message.from_user.id))
            bot.send_chat_action(message.from_user.id, action='typing')
            bot.send_message(message.from_user.id, answer)
            log_city_loc(message, answer)
        elif message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5Ô∏è‚É£ –¥–Ω–µ–π':
            answer = '{0}\n{1}\n{2}\n{3}\n{4}\n{5}'.format(
                answer_today_f_loc(message.from_user.id),
                answer_tomorrow_f_loc(message.from_user.id),
                answer_in_2_days_f_loc(message.from_user.id),
                answer_in_3_days_f_loc(message.from_user.id),
                answer_in_4_days_f_loc(message.from_user.id),
                answer_in_5_days_f_loc(message.from_user.id))
            bot.send_message(message.from_user.id, answer)
            bot.send_chat_action(message.from_user.id, action='typing')
            log_city_loc(message, answer)

        elif message.text.lower() in list_hi:
            answer = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, —Ö–∞—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?"
            bot.send_message(message.from_user.id, answer)
            log(message, answer)
        elif message.text.lower() in list_yes:
            answer = "–í —ç—Ç–æ–º –¥–µ–ª–µ —è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∏ —è –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            bot.send_message(message.from_user.id, answer)
            log(message, answer)
        else:
            answer = random_emoji()
            bot.send_message(message.from_user.id, answer)
            log(message, answer)
    except Exception as e:
        print("Exception (find): ", e)
        pass


@bot.message_handler(content_types=['sticker'])
def handler_sticker(message: types.Message):
    try:
        bot.send_sticker(message.from_user.id, message.sticker.file_id)
    except Exception as e:
        print("Exception (find):", e)
        pass


bot.polling(none_stop=True, interval=1)
